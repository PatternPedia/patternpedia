@prefix : <http://purl.org/patternpedia/patternlanguages/cloudcomputingpatterns#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@base <http://purl.org/patternpedia/patternlanguages/cloudcomputingpatterns/> .

#################################################################
#    Ontology
#################################################################

<userinterfacecomponent>
    rdf:type owl:Ontology ;
    owl:imports <http://purl.org/patternpedia/patternlanguages/cloudcomputingpatterns> .


#################################################################
#    Individual
#################################################################

<userinterfacecomponent#UserInterfaceComponent>
    rdf:type owl:NamedIndividual , <http://purl.org/patternpedia/patternlanguages/cloudcomputingpatterns#CloudComputingPattern> ;
    <http://purl.org/patternpedia#hasName> "User Interface Component"^^xsd:string ;
    :hasIcon "http://www.cloudcomputingpatterns.org/icons/user_interface_component_icon.png"^^xsd:anyURI ;
    :hasContext "User Interface Component instances part of a Distributed Application have to be added and removed easily from the application without affecting the user experience. The dependencies on other application components should, therefore, be reduced as much as possible."^^xsd:string ;
    :hasDrivingQuestion "How can User Interface Components be accessed interactively by humans while being configurable and decoupled from the remaining application?"^^xsd:string ;
    :hasIntent "Interactive synchronous access to applications is provided to humans, while application-internal interaction is realized asynchronously when possible to ensure Loose Coupling. Furthermore, the user interface should be customizable to be used by different customers."^^xsd:string ;
    :hasSolution "The User Interface Component serves as a bridge between the synchronous access of the human user and the asynchronous communication used with other application components. State information held externally, as described by the Stateless Component pattern. It is, therefore, attached to requests, may be held in a part of the user interface that is deployed on the userâ€™s access device, or may be obtained from external storage. Instances of User Interface Components are scaled based on the number of synchronous requests to is as described by the Elastic Load Balancer pattern."^^xsd:string ;
    :hasSolutionSketch "http://www.cloudcomputingpatterns.org/sketches/user_interface_component_sketch.png"^^xsd:anyURI .

