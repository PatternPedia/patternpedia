@prefix : <https://purl.org/patternpedia/patternlanguages/cloudcomputingpatterns#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@base <https://purl.org/patternpedia/patternlanguages/cloudcomputingpatterns/> .

#################################################################
#    Ontology
#################################################################

<processingcomponent>
    rdf:type owl:Ontology ;
    owl:imports <https://purl.org/patternpedia/patternlanguages/cloudcomputingpatterns> .


#################################################################
#    Individual
#################################################################

<processingcomponent#ProcessingComponent>
    rdf:type owl:NamedIndividual , <https://purl.org/patternpedia/patternlanguages/cloudcomputingpatterns#CloudComputingPattern> ;
    <https://purl.org/patternpedia#hasName> "Processing Component"^^xsd:string ;
    :hasIcon "https://www.cloudcomputingpatterns.org/icons/processing_component_icon.png"^^xsd:anyURI ;
    :hasContext "The processing functionality offered by an application shall be handled by different application component instances that operate independently. Instances of these components have to be added and removed easily to the application as part of scaling operations."^^xsd:string ;
    :hasDrivingQuestion "How can processing be scaled out elastically among distributed resources while being configurable regarding the supported functions to meet different customersâ€™ requirements?"^^xsd:string ;
    :hasIntent "Possibly long running processing functionality is handled by separate components to enable elastic scaling. Processing functionality is further made configurable to support different customer requirements."^^xsd:string ;
    :hasSolution "Processing functionality is split into separate function blocks and assigned to independent Processing Components. Each processing component is scaled out independently and is implemented in a stateless fashion as described in the Stateless Component pattern. Scaling is handled by an Elastic Queue. Data required for processing is provided with requests or by Storage Offerings."^^xsd:string ;
    :hasSolutionSketch "https://www.cloudcomputingpatterns.org/sketches/processing_component_sketch.png"^^xsd:anyURI .

